from transformers import pipeline
import xml.dom.minidom
import os

# create initial BT according to parameter
def create_xml():
    doc = xml.dom.minidom.Document()
    root = doc.createElement('root')
    doc.appendChild(root)
    
    tree = doc.createElement('BehaviorTree')
    root.appendChild(tree)
    
    seq = doc.createElement('Sequence')
    seq.setAttribute('text', 'IFTHENELSE')
    tree.appendChild(seq)
    
    for condition in conditions:
        # print(node)
        node = doc.createElement(condition[0])
        attribute = condition[1] + ',' + condition[2]
        node.setAttribute('text', attribute)
        seq.appendChild(node)
    
    # Please modify the path
    with open("/home/henry/LLM-BT/BTs_Update/initial.xml", "w", encoding='utf-8') as f:
        doc.writexml(f, indent='\t', addindent='\t', newl='\n', encoding="utf-8")
    
def matching(word):
    if word == 'move':
        create_node = ['IsObjectOnDestination', 'T-para','D-para']
    conditions.append(create_node)
    global num
    num = num + 1
    
# The text is generated by ChatGPT.
# This is an example.
# you can use a interface of ChatGPT and link the output from ChatGPT to the text
classifier = pipeline("ner", model="keywords_extraction")
text = "1. Move object 1 (green block) from the sorting area to position 12 on shelf level 1. \
2. Move object 2 (green block) from the sorting area to position 13 on shelf level 1. \
3. Move object 4 (green block) from the sorting area to position 14 on shelf level 1. \
4. Move object 3 (yellow block) from the sorting area to position 22 on shelf level 2. \
5. Move object 5 (yellow block) from the sorting area to position 23 on shelf level 2. \
6. Move object 6 (red block) from the sorting area to position 32 on shelf level 3."

results = classifier(text)

for result in results:
    result.pop('index')
    result.pop('start')
    result.pop('end')
    result.pop('score')
    # print(result)

# obtain parameter
num = -1
conditions = []
for result in results:
    if result['entity'] == 'B-Action':
        matching(result['word'])
    elif result['entity'] == 'B-Target':
       conditions[num][1] = result['word']
    elif result['entity'] == 'I-Target':
        conditions[num][1] = conditions[num][1] + '_' + result['word']
    elif result['entity'] == 'B-Destination':
        conditions[num][2] = result['word']
    elif result['entity'] == 'I-Destination':
        conditions[num][2] = conditions[num][2] + '_' + result['word']
        
create_xml()

os.system('cd ../BTs_Update/build/ && ./BT')